- agent_role = agent.role_in_organisation(current_organisation)
- agent_policy = policy(agent, policy_class: Agent::AgentPolicy)

tr id="agent_#{agent.id}"
  td
    - if agent_policy.edit?
      = link_to agent.reverse_full_name, edit_admin_organisation_agent_path(current_organisation, agent), class: "mr-2"
      - if agent.inactive? && agent.complete?
        = tag.span("Inactif", class: "badge badge-warning")
    - else
      span.mr-2= agent.reverse_full_name
    = me_tag(agent)
  td.word-break-all
    = agent.email
  td
    - agent.services.each do |service|
      .badge.badge-primary= service.short_name
  td.text-nowrap
    span>= agent_role.human_attribute_value(:access_level)
    - if agent_role.admin?
      i.fa.fa-user-cog
  td
    .d-flex
      - if agent_policy.create? && !agent.invitation_accepted? && !agent.is_an_intervenant?
        div.mr-3= link_to t("devise.invitations.reinvite"),
                reinvite_admin_organisation_invitation_path(current_organisation, agent),
                method: :post
      - if agent_policy.edit?
        div.mr-3= link_to edit_admin_organisation_agent_path(current_organisation, agent), title: t("helpers.edit") do
          i.fa.fa-edit
      - if agent_policy.destroy?
        - agent_removal_presenter = AgentRemovalPresenter.new(agent, current_organisation)
        - path = admin_organisation_agent_path(current_organisation, agent)
        = link_to path,
                method: :delete,
                title: agent_removal_presenter.button_value,
                data: { confirm: agent_removal_presenter.confirm_message } do
          i.fa.fa-trash-alt
