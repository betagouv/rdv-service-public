- content_for(:menu_item) { "menu-agents" }

- content_for :title do
  | Modifier le niveau de permission de l'agent #{@agent.full_name}

- content_for :breadcrumb do
  ol.breadcrumb.m-0
    li.breadcrumb-item
      = link_to "Vos agents", admin_organisation_agents_path(current_organisation)
    li.breadcrumb-item.active
      = @agent.full_name

- if @agent.is_an_intervenant?
  = render "admin/agent_intervenants/name_form", agent_intervenant: @agent

.row.justify-content-center
  .col-md-12.col-lg-8
    .card
      .card-body.js_agent_role_form
        = simple_form_for [:admin, current_organisation, @agent] do |f|
          = render "model_errors", model: @agent
          - allowed_to_change_services = Agent::TerritoryPolicy.new(current_agent, current_territory).allow_to_manage_access_rights?

          = f.association :services, collection: @services, disabled: true, input_html: { class: "select2-input" }, wrapper_html: { class: "mb-0" }, hint: allowed_to_change_services ? nil : "Le changement de service est réservé aux admins de territoire"
          - if allowed_to_change_services
            span.small.text-muted
              | Vous pouvez désormais attribuer plusieurs services à un agent, via votre interface de Configuration - Admin de territoire.&nbsp;
              = link_to "Accéder à la configuration des agents", edit_admin_territory_agent_path(territory_id: current_territory.id, agent_id: @agent.id)
          - else
            span.small.text-muted
              | En tant qu’agent, vous pouvez désormais être rattaché à plusieurs services d’une même organisation. Pour cela, contacter un agent admin du territoire.

          hr

          = f.simple_fields_for @agent_role do |ff|
            - # rubocop:disable Rails/OutputSafety
            = ff.input :access_level, \
              collection: @roles, \
              label_method: -> { AgentRole.human_attribute_value(:access_level, _1, context: :explanation).html_safe }, \
              hint: "Les agents peuvent avoir des permissions différentes sur chaque organisation.", \
              as: :radio_buttons
          - # rubocop:enable Rails/OutputSafety

          / allow turning an intervenant into an agent with an account
          - if AgentRole.find(@agent_role.id).access_level == "intervenant"
            .js_agent_role_form__agent_with_account_fields[style="display:none;"]
              = f.input :email, label: "Email d'invitation de l'agent", required: true, disabled: true
              .row
                .col-md-6
                  = f.input :first_name, required: true, disabled: true
                .col-md-6
                  = f.input :last_name, required: true, input_html: { value: "" }, disabled: true

          .row
            - if policy([:agent, @agent]).destroy?
              .col.text-left
                = link_to @agent_removal_presenter.button_value, \
                  admin_organisation_agent_path(current_organisation, @agent), \
                  data: { confirm: @agent_removal_presenter.confirm_message }, \
                  method: :delete, \
                  class: "btn btn-outline-danger"
            .col.text-right
              - if AgentRole.find(@agent_role.id).access_level == "intervenant"
                = f.button :submit
              - else
                .js_agent_role_form__agent_with_account_fields
                  = f.button :submit
                .js_agent_role_form__intervenant_fields[style="display:none;"]
                  = f.button :submit, data: { confirm: "Cet agent ne pourra plus se connecter à son compter. Êtes vous sûr de vouloir continuer ?" }

.row.justify-content-center
  .col-md-12.col-lg-8
    = render "admin/versions/resource_versions_row", resource_policy: policy([:agent, @agent]), resource: @agent
